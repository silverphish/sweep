
# ---------------------------------------------------------------------------------------------
# start program - get user input
# ---------------------------------------------------------------------------------------------

def prompt(*args)
    print(*args)
    gets
end
puts " "
puts " "
puts " "
puts " "
puts "==========================================="
puts "=             Sweep v0.1                  ="
puts "=         (c) SilverPhish 2015            ="
puts "=                                         ="
puts "=    **for authorised pentesting only**   ="
puts "==========================================="
puts " "
puts " "
word1 = prompt "Enter first string: "
word2 = prompt "Enter second string: "
word3 = prompt "Enter third string: "
pw_len = prompt "Min length of password: "
reverse_parm = prompt "Reverse words (y/n): "
date_parm = prompt "Enter date format to be used - m (mmdd), d (ddmm) or b (both): "
new_file = prompt "Create new output file or append (n/a): "

if date_parm == ""
   date_parm = "b"
end

if word1.chomp == ""
   word1 = "dummy"
end
if word2.chomp == ""
   word2 = "dummy"
end
if word3.chomp == ""
   word3 = "dummy"
end

# ---------------------------------------------------------------------------------------------
# first sweep - create combinations with 'and', '_'  and spaces
# ---------------------------------------------------------------------------------------------

sweep = sweep = 1
puts "sweep " + "#{sweep}" + ": creating combinations"

num_words = 0

contentsArray=[]  # start with an empty array
contentsArray=["dummy", "dummy", "dummy"]  # start with an default array
contentsArray[0]=word1
contentsArray[1]=word2
contentsArray[2]=word3
output_file = File.open("sweep.tmp", "w")

# first word formating:
output_file.puts contentsArray[0].chomp
if reverse_parm.chomp == "y"
   output_file.puts contentsArray[0].chomp.reverse
end
output_file.puts contentsArray[0].chomp + "and" + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + "and" + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + "and" + contentsArray[1].chomp + "and" + contentsArray[2].chomp

output_file.puts contentsArray[0].chomp + " " + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + " " + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + " " + contentsArray[1].chomp + " " + contentsArray[2].chomp

output_file.puts contentsArray[0].chomp + "_" + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + "_" + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + "_" + contentsArray[1].chomp + "_" + contentsArray[2].chomp

# second word formating:
output_file.puts contentsArray[1].chomp
if reverse_parm.chomp == "y"
   output_file.puts contentsArray[1].chomp.reverse
end
output_file.puts contentsArray[1].chomp + "and" + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + "and" + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + "and" + contentsArray[0].chomp + "and" + contentsArray[2].chomp

output_file.puts contentsArray[1].chomp + " " + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + " " + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + " " + contentsArray[0].chomp + " " + contentsArray[2].chomp

output_file.puts contentsArray[1].chomp + "_" + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + "_" + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + "_" + contentsArray[0].chomp + "_" + contentsArray[2].chomp

# third word formating:
output_file.puts contentsArray[2].chomp
if reverse_parm.chomp == "y"
   output_file.puts contentsArray[2].chomp.reverse
end
output_file.puts contentsArray[2].chomp + "and" + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + "and" + contentsArray[1].chomp
output_file.puts contentsArray[2].chomp + contentsArray[2].chomp
output_file.puts contentsArray[2].chomp + "and" + contentsArray[0].chomp + "and" + contentsArray[2].chomp

output_file.puts contentsArray[2].chomp + " " + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + " " + contentsArray[1].chomp
output_file.puts contentsArray[2].chomp + contentsArray[2].chomp
output_file.puts contentsArray[2].chomp + " " + contentsArray[0].chomp + " " + contentsArray[2].chomp

output_file.puts contentsArray[2].chomp + "_" + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + "_" + contentsArray[1].chomp
output_file.puts contentsArray[2].chomp + contentsArray[2].chomp
output_file.puts contentsArray[2].chomp + "_" + contentsArray[0].chomp + "_" + contentsArray[2].chomp

# ---------------------------------------------------------------------------------------------
# sweep - uppercase first characters    
# ---------------------------------------------------------------------------------------------

sweep = sweep + 1
puts "sweep " + "#{sweep}" + ": uppercase first character"

contentsArray[0]=word1.capitalize
contentsArray[1]=word2.capitalize
contentsArray[2]=word3.capitalize

# first word formating:
output_file.puts contentsArray[0].chomp
if reverse_parm.chomp == "y"
   output_file.puts contentsArray[0].chomp.reverse
end
output_file.puts contentsArray[0].chomp + "and" + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + "and" + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + "and" + contentsArray[1].chomp + "and" + contentsArray[2].chomp

output_file.puts contentsArray[0].chomp + " " + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + " " + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + " " + contentsArray[1].chomp + " " + contentsArray[2].chomp

output_file.puts contentsArray[0].chomp + "_" + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + contentsArray[1].chomp
output_file.puts contentsArray[0].chomp + "_" + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + contentsArray[2].chomp
output_file.puts contentsArray[0].chomp + "_" + contentsArray[1].chomp + "_" + contentsArray[2].chomp

# second word formating:
output_file.puts contentsArray[1].chomp
if reverse_parm.chomp == "y"
   output_file.puts contentsArray[1].chomp.reverse
end
output_file.puts contentsArray[1].chomp + "and" + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + "and" + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + "and" + contentsArray[0].chomp + "and" + contentsArray[2].chomp

output_file.puts contentsArray[1].chomp + " " + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + " " + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + " " + contentsArray[0].chomp + " " + contentsArray[2].chomp

output_file.puts contentsArray[1].chomp + "_" + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + contentsArray[0].chomp
output_file.puts contentsArray[1].chomp + "_" + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + contentsArray[2].chomp
output_file.puts contentsArray[1].chomp + "_" + contentsArray[0].chomp + "_" + contentsArray[2].chomp

# third word formating:
output_file.puts contentsArray[2].chomp
if reverse_parm.chomp == "y"
   output_file.puts contentsArray[2].chomp.reverse
end
output_file.puts contentsArray[2].chomp + "and" + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + "and" + contentsArray[1].chomp
output_file.puts contentsArray[2].chomp + contentsArray[2].chomp
output_file.puts contentsArray[2].chomp + "and" + contentsArray[0].chomp + "and" + contentsArray[2].chomp

output_file.puts contentsArray[2].chomp + " " + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + " " + contentsArray[1].chomp
output_file.puts contentsArray[2].chomp + contentsArray[2].chomp
output_file.puts contentsArray[2].chomp + " " + contentsArray[0].chomp + " " + contentsArray[2].chomp

output_file.puts contentsArray[2].chomp + "_" + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + contentsArray[0].chomp
output_file.puts contentsArray[2].chomp + "_" + contentsArray[1].chomp
output_file.puts contentsArray[2].chomp + contentsArray[2].chomp
output_file.puts contentsArray[2].chomp + "_" + contentsArray[0].chomp + "_" + contentsArray[2].chomp

# ---------------------------------------------------------------------------------------------
# delete sweep - remove any words not required
# ---------------------------------------------------------------------------------------------


# close output file then reopen to reprocess list so far and write to new file

output_file.close
output_file = File.open("sweep.tmp1", "w")
File.open("sweep.tmp", "r") do |f2|
  while line = f2.gets
     if line =~ /dummy/
        num_words = num_words + 0
     elsif line =~ /ymmud/
        num_words = num_words + 0
     elsif line =~ /Dummy/
        num_words = num_words + 0
     elsif line =~ /ymmuD/
        num_words = num_words + 0
     else
        num_words = num_words + 1
        output_file.puts line
     end
  end
end

# ---------------------------------------------------------------------------------------------
# sweep - add some numbers and characters to end and beginig of passwords
# ---------------------------------------------------------------------------------------------

sweep = sweep + 1
puts "sweep " + "#{sweep}" + ": Adding numbers and characters"

num_words = 0

# close outout file then reopen to reprocess list so far and write to new file
output_file.close
output_file = File.open("sweep.tmp2", "w")
num_lit = 000
File.open("sweep.tmp1", "r") do |f1|
  while line = f1.gets
     num_lit = 000
     output_file.puts line.chomp + ""
     output_file.puts line
#  add to begining:
        output_file.puts line.chomp + "001"
        output_file.puts line.chomp + "111"
        output_file.puts line.chomp + "01"
        output_file.puts line.chomp + "1"
        output_file.puts line.chomp + "02"
        output_file.puts line.chomp + "03"
        output_file.puts line.chomp + "04"
        output_file.puts line.chomp + "05"
        output_file.puts line.chomp + "06"
        output_file.puts line.chomp + "07"
        output_file.puts line.chomp + "08"
        output_file.puts line.chomp + "09"
        output_file.puts line.chomp + "10"
        output_file.puts line.chomp + "11"
        output_file.puts line.chomp + "12"
        output_file.puts line.chomp + "100"
        output_file.puts line.chomp + "999"
        output_file.puts line.chomp + "998"
        output_file.puts line.chomp + "123"
        output_file.puts line.chomp + "321"
        output_file.puts line.chomp + "ABC"
        output_file.puts line.chomp + "abc"
        output_file.puts line.chomp + "XYZ"
        output_file.puts line.chomp + "xyz"
        output_file.puts line.chomp + "QWERTY"
        output_file.puts line.chomp + "qwerty"
        output_file.puts line.chomp + "ASD"
        output_file.puts line.chomp + "asd"
        output_file.puts line.chomp + "!"

 if date_parm.chomp == 'm' or date_parm.chomp == 'b'
#  add mmdd to end of passwords:
        m = 1
        12.times do |m|
             d = 1
             32.times do |d|
                if d < 10
                   if m < 10
                      output_file.puts line.chomp + "0" + "#{m}" + "0" + "#{d}"
                   else
                      output_file.puts line.chomp + "#{m}" + "0" + "#{d}"
                   end
                else
                   if m < 10
                      output_file.puts line.chomp + "0" + "#{m}" + "#{d}"
                   else
                      output_file.puts line.chomp + "#{m}" + "#{d}"
                   end
                end
                d + 1
             end
           m + 1
        end

#  add mmdd to begining of passwords:
        m = 1
        12.times do |m|
             d = 1
             32.times do |d|
                if d < 10
                   if m < 10
                      output_file.puts "0" + "#{m}" + "0" + "#{d}" + line.chomp
                   else
                      output_file.puts "#{m}" + "0" + "#{d}" + line.chomp
                   end
                else
                   if m < 10
                      output_file.puts "0" + "#{m}" + "0" + "#{d}" + line.chomp
                   else
                      output_file.puts "#{m}" + "#{d}" + line.chomp
                   end
                end
                d + 1
             end
           m + 1
        end
 end

 if date_parm.chomp == 'd' or date_parm.chomp == 'b'
#  add ddmm to end of passwords:
        m = 1
        12.times do |m|
             d = 1
             32.times do |d|
                if d < 10
                   if m < 10
                      output_file.puts line.chomp + "0" + "#{d}" + "0" + "#{m}"
                   else
                      output_file.puts line.chomp + "0" + "#{d}" + "#{m}"
                   end
                else
                   if m < 10
                      output_file.puts line.chomp + "#{d}" + "0" + "#{m}"
                   else
                      output_file.puts line.chomp + "#{d}" + "#{m}"
                   end
                end
                d + 1
             end
           m + 1
        end

#  add ddmm to begining of passwords:
        m = 1
        12.times do |m|
             d = 1
             32.times do |d|
                if d < 10
                   if m < 10
                      output_file.puts "0" + "#{d}" + "0" + "#{m}" + line.chomp
                   else
                      output_file.puts "0" + "#{d}" + "#{m}" + line.chomp
                   end
                else
                   if m < 10
                      output_file.puts "#{d}" + "0" + "#{m}" + line.chomp
                   else
                      output_file.puts "#{d}" + "#{m}" + line.chomp
                   end
                end
                d + 1
             end
           m + 1
        end
 end
#  add to begining:
        output_file.puts "111" +  line.chomp
        output_file.puts "001" +  line.chomp
        output_file.puts "01" +  line.chomp
        output_file.puts "1" +  line.chomp
        output_file.puts "02" +  line.chomp
        output_file.puts "03" +  line.chomp
        output_file.puts "04" +  line.chomp
        output_file.puts "05" +  line.chomp
        output_file.puts "06" +  line.chomp
        output_file.puts "07" +  line.chomp
        output_file.puts "08" +  line.chomp
        output_file.puts "09" +  line.chomp
        output_file.puts "10" +  line.chomp
        output_file.puts "11" +  line.chomp
        output_file.puts "12" +  line.chomp
        output_file.puts "100" +  line.chomp
        output_file.puts "999" +  line.chomp
        output_file.puts "998" +  line.chomp
        output_file.puts "123" +  line.chomp
        output_file.puts "321" +  line.chomp
        output_file.puts "ABC" +  line.chomp
        output_file.puts "abc" +  line.chomp
        output_file.puts "XYZ" +  line.chomp
        output_file.puts "xyz" +  line.chomp
        output_file.puts "QWERTY" +  line.chomp
        output_file.puts "qwerty" +  line.chomp
        output_file.puts "ASD" +  line.chomp
        output_file.puts "asd" +  line.chomp
        output_file.puts "!" +  line.chomp
  end
end

output_file.close

# ---------------------------------------------------------------------------------------------
# sweep - replace some characters
# ---------------------------------------------------------------------------------------------

sweep = sweep + 1
puts "sweep " + "#{sweep}" + ": Special character replacements"

output_file = File.open("sweep.tmp3", "w")

File.open("sweep.tmp2", "r") do |f2|
  while line = f2.gets
     output_file.puts line
     if line =~ /s/
        line.sub!('s','$')
        output_file.puts line
     end
     if line =~ /S/
        line.gsub!('S','$')
        output_file.puts line
     end
     if line =~ /i/
        line.sub!('i','1')
        output_file.puts line
     end
     if line =~ /I/
        line.gsub!('I','1')
        output_file.puts line
     end
     if line =~ /a/
        line.gsub!('a','@')
        output_file.puts line
     end
     if line =~ /A/
        line.gsub!('A','@')
        output_file.puts line
     end
     if line =~ /o/
        line.gsub!('o','0')
        output_file.puts line
     end
     if line =~ /O/
        line.gsub!('O','0')
        output_file.puts line
     end
  end
end

output_file.close

# ---------------------------------------------------------------------------------------------
# sweep - final sweep - drop any pw's less than 8 chars
# ---------------------------------------------------------------------------------------------

sweep = sweep + 1
puts "sweep " + "#{sweep}" + ": drop passwords < " + "#{pw_len}"
num_words = 0

pw_len_num = pw_len.chomp.to_i
output_file = File.open("sweep.lst", "w")
File.open("sweep.tmp3", "r") do |f2|
  while line = f2.gets
     if line.length > pw_len_num
        output_file.puts line
        num_words = num_words + 1
     else
        num_words = num_words + 0
     end
  end
end

output_file.close
puts "COMPLETE"
puts "#{num_words}" + " passwords written to sweep.lst"

